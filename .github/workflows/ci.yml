name: CI Pipeline

# This pipeline triggers when changes are pushed to the 'main' branch.
on:
  push:
    branches:
      - main

jobs:
  build:
    # Use the latest version of Ubuntu as the runner environment.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up the Node.js environment (using Node.js version 16)
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Step 3: Install dependencies based on your package.json file
      - name: Install Dependencies
        run: npm install

      # Step 4: Build the application to prepare for testing and deployment
      - name: Build Application
        run: npm run build

      # Step 5: Run unit and integration tests to ensure everything is working
      - name: Run Tests
        run: npm test

      # Step 6: Build Docker image and push to Docker Hub
      - name: Build and Push Docker Image
        run: |
          docker build -t myapp:${{ github.sha }} .
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          docker tag myapp:${{ github.sha }} mydockerhubusername/myapp:${{ github.sha }}
          docker push mydockerhubusername/myapp:${{ github.sha }}
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # Step 7: Deploy to the staging environment
      - name: Deploy to Staging via SSH
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ secrets.STAGING_SERVER_IP }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull mydockerhubusername/myapp:${{ github.sha }}
            docker-compose -f /path/to/docker-compose.yml up --build -d
